import os from 'os';
import execa from 'execa';
import fs from 'fs-extra';
import path from 'path';
import { command } from '../utilities/ember-cli-entities';
import copyDeclarations from '../utilities/copy-declarations';

export const PRECOMPILE_MANIFEST = 'dist/.ts-precompile-manifest';

export default command({
  name: 'ts:precompile',
  works: 'insideProject',
  description:
    'Generates JS and declaration files from TypeScript sources in preparation for publishing.',

  availableOptions: [{ name: 'manifest-path', type: String, default: PRECOMPILE_MANIFEST }],

  async run(options: { manifestPath: string }) {
    let outDir = `${os.tmpdir()}/e-c-ts-precompile-${process.pid}`;
    let { paths, rootDir, pathRoots } = this._loadConfig(outDir);
    if (!paths) {
      this.ui.writeLine('No `paths` were found in your `tsconfig.json`, so `ts:precompile` is a no-op.');
      return;
    }

    // prettier-ignore
    await execa('tsc', [
      '--allowJs', 'false',
      '--noEmit', 'false',
      '--rootDir', rootDir || this.project.root,
      '--declaration',
      '--declarationDir', outDir,
      '--emitDeclarationOnly',
    ]);

    let manifestPath = options.manifestPath;
    let packageName = this.project.pkg.name;
    let createdFiles = copyDeclarations(pathRoots, paths, packageName, this.project.root);

    fs.mkdirsSync(path.dirname(manifestPath));
    fs.writeFileSync(manifestPath, JSON.stringify(createdFiles.reverse()));
    fs.remove(outDir);
  },

  _loadConfig(outDir: string) {
    let ts = this.project.require('typescript') as typeof import('typescript');
    let configPath = ts.findConfigFile(this.project.root, ts.sys.fileExists);
    if (!configPath) {
      throw new Error('Unable to locate `tsconfig.json`');
    }

    let configSource = ts.readJsonConfigFile(configPath, ts.sys.readFile);
    let config = ts.parseJsonSourceFileConfigFileContent(configSource, ts.sys, path.dirname(configPath));

    let { paths, rootDir, baseUrl } = config.options;
    let configDir = path.dirname(configPath);
    let relativeBaseDir = path.relative(configDir, baseUrl || configDir);

    let pathRoots = [
      // Any declarations found in the actual source
      path.resolve(rootDir || configDir, relativeBaseDir),

      // Any declarations generated by `tsc`
      path.resolve(outDir, relativeBaseDir),
    ];

    return { rootDir, paths, pathRoots };
  }
});
